<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE book
  PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"  >
<book lang="en">
  <bookinfo>
    <title>INDICO Distribution Guide (Developers)</title>
    <corpauthor>CERN</corpauthor>
  </bookinfo>

<chapter id='distribute'>
  <title>Distributing the MaKaC package</title>
   <para>To Distribute the MaKaC package:</para>
    <orderedlist>
      <listitem>
	<para>You need to run the distribution from the Indico root directory, a version number is needed and a format type is optional.</para>
      </listitem>
      <listitem>
	<para>You need to specify the version number that you are distributing, you can either do this by:</para>
	<orderedlist>
         <listitem>
	    <para>Specifying the version number as an option when running the distribution by using: <screen>setup.py sdist --version x.x.x</screen>Where x.x.x is the version number</para>
	 </listitem>
         <listitem>
	    <para>Enter the version number when asked and just run the distribution with: <screen>setup.py sdist</screen></para>
	 </listitem>
        </orderedlist>
      </listitem>
      <listitem>
	<para>If you want a specific format type for example a .tar you need to specify this otherwise the format type will be the defaulf for the platform, to specify a format type: <screen>setup.py sdist --format=tar</screen> This can be done before or after the --version option and in either order, i.e. <screen>setup.py sdist --version x.x.x --format=tar</screen></para>
      </listitem>
    </orderedlist>
    <para> The distribution will be in the dist folder  and be called MaKaC-x.x.x.tar, depending on the version number and format type you gave</para>
    <sect1 id='mani'>
      <title>To add files to be distributed</title>
      <para>If you want to add any extra files to be distributed with the package, you just need to add the file name and location to the 'manifest.in' file. For example if you want to distribute a file called script.py which is in the 'dist' folder, in the manifest file you can write: <screen> include dist/scrip.py</screen></para>
    </sect1>
    <sect1 id='xtrpkg'>
      <title>To add packages to be distributed</title>
      <para>If you want to add any extra packages to be distributed, you need to edit the setup() function in the setup.py script, you need to add the name of the package into the 'packages' section, e.g.<screen>packages=['MaKaC', 'MaKaC.authentication',\
        'MaKaC.common', 'MaKaC.export', 'MaKaC.webinterface',\
        'MaKaC.webinterface.pages', 'MaKaC.webinterface.rh',\
        'MaKaC.webinterface.session', 'MaKaC.webinterface.common',\
        'MaKaC.PDFinterface', 'MaKaC.ICALinterface'],</screen>Your package name needs to go into the end of this list</para>
    </sect1>
      <sect1 id='xtrinst'>
      <title>To add files to be installed</title>
      <para>If you want to add any files to be installed that are not inside the packages mentioned above you need to specify the file names and the location you want them to go in, e.g.<screen>data_files=[(x.tplDir, TPLFileList()),\
                  (x.htdocsDir, HTDOCFileList()),\
                  (x.ssDir, SSFileList()),\
                  (x.imageDir, IMGFileList()),
                  (x.confdef,['config.xml','dist/config.xsd',\
                              'reconfigure.py','dist/confmerge.py'])]</screen>The format to add the files is (location,file).</para>
    </sect1>

</chapter>

<chapter id='DevelInstall'>
<title>Installing MaKaC for development</title>
<para> To install the MaKaC module for use on your local machine for development:</para>
<orderedlist>
<listitem><para>From the MaKaC/code folder run <screen>setup.py develop</screen></para></listitem>
<listitem><para>You will be asked for the directory you checked out to, the database parameters you use and the url base you are using</para></listitem>
</orderedlist>
<para>The MaKaCConfig file will be generated to use your settings for the module. If you need to add any system icons or file names
add them to config.xml and commit the config file so others can then use that config file when they next check out.</para>
</chapter>


<chapter id='XMLConf'>
    <title>Explanation of the XML Configuration File 'config.xml'</title>
    <sect1 id='xmlpaths'>
      <title>Path Directories</title>
      <para><emphasis>Numbered Sections may not been in the same order in the actual config.xml file</emphasis></para>
      <screen>
&lt;!--Enter Path names in between the pathdir tags, e.g.&lt;pathdir>c:\tmp&lt;/pathdir> 
or leave blank for default-->

	&lt;paths>
<co id="pkg"/>   &lt;pathname>pkgdirectory&lt;/pathname>
	    &lt;pathdir>&lt;/pathdir>
	&lt;/paths>

	&lt;paths>
<co id="htd"/>   &lt;pathname>htdocs&lt;/pathname> 
	    &lt;pathdir>&lt;/pathdir>
	&lt;/paths>
&lt;!--htdocs needs to be the same directory as where you set the modpython handler 
(or blank)-->

	&lt;paths>
<co id="arc"/>   &lt;pathname>archive&lt;/pathname> 
	    &lt;pathdir>&lt;/pathdir>
	&lt;/paths>

	&lt;paths>
<co id="tem"/>   &lt;pathname>temp&lt;/pathname> 
	     &lt;pathdir>&lt;/pathdir>
	&lt;/paths>

	&lt;paths>
<co id="tpl"/>   &lt;pathname>tpls&lt;/pathname> 
    &lt;pathdir>&lt;/pathdir>
	&lt;/paths>

&lt;paths>
<co id="ss"/>   &lt;pathname>ssheets&lt;/pathname>
    &lt;pathdir>&lt;/pathdir>
	&lt;/paths> 

        </screen>

      <calloutlist>
	<callout arearefs="pkg">
	  <para>The main package directory, this is where the main package files for the Indico program will be put, under a folder called Makac.</para>
	</callout>
	<callout arearefs="htd">
	  <para>The htdocs directory, this directory holds the webpage files for the webinterface.</para>
	</callout>
	<callout arearefs="arc">
	  <para>The archive directory, multimedia files from the conferences will be stored in this directory.</para>
	</callout>
	<callout arearefs="tem">
	  <para>The temporary directory, files being uploaded and any other temporary files will be stored into this directory, <emphasis>Note: This directory needs to have a fair amount of space available.</emphasis></para>
	</callout>
	<callout arearefs="tpl">
	  <para>The templates directory, templates for the webinterface are kept in this directory.</para>
	</callout>
       <callout arearefs="ss">
	 <para>The stylesheets directory, the stylesheets are stored in this directory</para>
	</callout>
      </calloutlist>
   </sect1>

   <sect1 id='xmldb'>
      <title>Database, Access Rights, Url, Email, SMTP and OAI Parameters</title>
      <screen>
&lt;!--Enter database parameters in between tags, e.g. &lt;port>1234&lt;/port>
or leave as they are for default-->

	&lt;db_param>
     <co id="hst"/>     &lt;host>localhost&lt;/host>
     <co id="prt"/>     &lt;port>9675&lt;/port>
	&lt;/db_param>


&lt;!-- Enter user and group name for access rights on the Public Folder 
(only applicable for linux installations)-->

	&lt;access>
     <co id="usr"/>     &lt;user>&lt;/user>
     <co id="grp"/>     &lt;group>&lt;/group>
	&lt;/access>

&lt;!--Enter url base in between tags, e.g. &lt;url>http://localhost/MaKaC&lt;/url> 
or leave as it is for default-->

	
     <co id="url"/>	&lt;url>http://localhost/MaKaC&lt;/url>
	


&lt;!--Enter support email in between tags, e.g. &lt;email>indico-project@cern.ch&lt;/email> 
or leave for default-->

	
     <co id="ema"/>	&lt;email>indico-project@cern.ch&lt;/email>


&lt;!--Enter SMTP Server to send Email or leave for default-->

     <co id="smt"/>	&lt;smtp>smtp.cern.ch&lt;/smtp>



&lt;!--OAI Parameters, leave for default -->

      <co id="oai2"/> &lt;OAI&gt;
             &lt;logfile>/tmp/oailog.log&lt;/logfile>
             &lt;nb_record>100&lt;/nb_record>
             &lt;nb_ids>100&lt;/nb_ids>
             &lt;oai_rt_exp>90000&lt;/oai_rt_exp>
             &lt;namespace>eAgora.cern.ch&lt;/namespace>
             &lt;iconfNS>URL_base&lt;/iconfNS>
             &lt;iconfXSD>URL_base+"/iconf.xsd"&lt;/iconfXSD>
             &lt;reposName>eAgora&lt;/reposName>
             &lt;reposId>eAgora.cern.ch&lt;/reposId>
       &lt;/OAI>
	</screen>

       <calloutlist>
	<callout arearefs="hst">
	  <para>The database host, this parameter holds the location of the host that the database is stored on.</para>
	</callout>
	<callout arearefs="prt">
	  <para>The database port, this parameter holds the port number of which to contact the database.</para>
	</callout>
      <callout arearefs="usr">
	  <para>The user for access, this parameter holds the user for which the public folder will be given rights to.</para>
	</callout>
	<callout arearefs="grp">
	  <para>The group for access, this parameter holds the group for which the public folder will be given rights to.</para>
	</callout>
	<callout arearefs="url">
	  <para>The Base Url, the url from which Indico can be reached from a web browser.</para>
	</callout>
	<callout arearefs="ema">
	  <para>The support email, the email address for people to contact with support issues.</para>
	</callout>
	<callout arearefs="smt">
	  <para>The smtp server, the server to allow emails to be sent out.</para>
	</callout>
	<callout arearefs="oai2">
	  <para>The OAI parameters, these are for configuring the open archive interface. </para>
	</callout>
      </calloutlist>
   </sect1>

    <sect1 id="xmltypes">
      <title>File Types and System Icons</title>
      <screen>
&lt;!--Known file types-->

<co id="ftype"/> &lt;FileType>
            &lt;type>DOC&lt;/type>
            &lt;name>Ms Word&lt;/name>
            &lt;loc>application/msword&lt;/loc>
            &lt;img>doc.gif&lt;/img>
	  &lt;/FileType>

&lt;!-- System Icons -->

<co id="sysI"/>	&lt;SysIcon>
             &lt;icon>modify&lt;/icon>
             &lt;pic>link.gif&lt;/pic>
	  &lt;/SysIcon>

&lt;!-- Stylesheets-->


<co id="ssa"/>   &lt;event>
          &lt;eventname>simple_event&lt;/eventname>
              &lt;sheets>
                        &lt;view>static&lt;/view>
                        &lt;style>static&lt;/style>
              &lt;/sheets>
    &lt;/event>


&lt;!-- Default Stylesheets -->

<co id="dss"/> &lt;defaultss>
                &lt;eventid>simple_event&lt;/eventid>
                &lt;sheet>lecture&lt;/sheet>
   &lt;/defaultss>
      </screen>

       <calloutlist>
	<callout arearefs="ftype">
	  <para>FileTypes, These specify the different file types and the name, location and image associated with them that are available within Indico.</para>
	</callout>
	<callout arearefs="sysI">
	  <para>System Icons, These specify the icon name and the image associated with them.</para>
	</callout>
	<callout arearefs="ssa">
	  <para>Stylesheets, These specify the stylesheets available for each event with the event name, view and stylesheet.</para>
	</callout>
       <callout arearefs="dss">
	  <para>Default Stylesheets, These specify the  default stylesheet for each event with the event name and stylesheet.</para>
	</callout>
       </calloutlist> 
  </sect1>    
</chapter>

<chapter id='xml'>
    <title>Adding parameters or paths to the XML configuration file</title>
    <para>If parameters or paths need to be added to the config.xml file so the user can customise them they can be added depending on what paramter they are:</para>
    <sect1 id='addfiletype'>
      <title>Adding new File Type or System Icon</title>
      <para>To add a new file type or system icon you just need to add another tag to the xml file</para>
      <orderedlist>
	  <listitem>
	    <para>FILE TYPE: To add a File Type just add a FileType tag which has type, name, loc and img tags inside it to the bottom of the File Type section, e.g.:
        <screen>
        &lt;FileType>
                    &lt;type>PPT&lt;/type>
                    &lt;name>Ms Powerpoint&lt;/name>
                    &lt;loc>application/vnd.ms-powerpoint&lt;/loc>
                   &lt;img>ppt.gif&lt;/img>
        &lt;/FileType></screen></para>
	  </listitem>
	<listitem>
	  <para>SYSTEM ICON: To add a System Icon just add a SysIcon tag which has icon and pic tags inside it to the bottom of the System Icons section, e.g.: 
       <screen>
        &lt;SysIcon>
               &lt;icon>modify&lt;/icon>
               &lt;pic>link.gif&lt;/pic>
        &lt;/SysIcon></screen></para>
	  </listitem>
	</orderedlist>
      <para>Both the File Types and System Icons are stored in dictionarys in the setup.py file called 'types' and 'systemicons'</para>
      </sect1>

      <sect1 id='addpath'>
      <title>Adding a new Path parameter</title>
      <para>To add a new Path parameter you just need to add another 'paths' tag which has pathname and pathdir inside it to the bottom of the paths section, e.g.:
      <screen>
        &lt;paths>
            &lt;pathname>archive&lt;/pathname>
            &lt;pathdir>&lt;/pathdir>
        &lt;/paths></screen></para>
      <para>The paths are are stored in the setup.py in a dictionary called 'paths' using the &lt;pathname> as the key in the example above to get the path directory you would use paths['archive']</para>
    </sect1>

    <sect1 id='addss'>
      <title>Adding a new Stylesheet parameter</title>
      <para>To add a new Stylesheet parameter you just need to add another 'sheets' tag (inside the correct events section) which has view and style inside it to the bottom of the stylesheets section, e.g.:
      <screen>
        &lt;sheets
            &lt;view>static&lt;/view>
            &lt;style>static&lt;/style>
        &lt;/sheets></screen></para>
     <para>The stylesheets are stored in a dictionary in setup.py call 'stylesheets' with eventname as the first key and view as the second key.</para> 
     <para>To add a new Default Stylesheet parameter you just need to add another 'defaultss' tag which has eventid and sheet inside it to the bottom of the default stylesheets section, e.g.:
      <screen>
        &lt;defaultss>
            &lt;eventid>meeting&lt;/eventid>
            &lt;sheet>standard&lt;/sheet>
        &lt;/defaultss>
      </screen></para>
     <para>The stylesheets are stored in a dictionary in setup.py call 'dss' with eventid as the key .</para> 
    </sect1>


    <sect1 id='oai'>
      <title>Adding a new OAI parameter</title>
      <para>To add a new OAI paramter:</para>
      <orderedlist>
	  <listitem>
	    <para>You need to add the name of the parameter as a tag to the end of the OAI section, e.g.:
            <screen>
        &lt;OAI>
               &lt;logfile>/tmp/oailog.log &lt;/logfile>
               &lt;nb_record>100 &lt;/nb_record>
                            ...
               &lt;reposName>eAgora &lt;/reposName>
               &lt;reposId>eAgora.cern.ch &lt;/reposId
               <lineannotation>New tag would go here e.g. &lt;new>value&lt;/new></lineannotation>
        &lt;/OAI></screen></para>
	 </listitem>
	 <listitem>
	  <para>In the config handler file 'confmerge.py', Parser() Class,  you need to add the name of your tag into the list of 'if name in' inside the relevant section of the  end element function</para>
	</listitem>
	<listitem>
	  <para>You also need to add the new tag into the config schema 'config.xsd' add the following line into the OAI section of the schema:<screen>&lt;xs:element name="NEWTAG" type="xs:string" /></screen> Replace NEWTAG with the name of the tag you added</para>
	 </listitem>
	<listitem>
	  <para>Validate that the schema and the xml file conicide with each other and validate correctly, you can use: <ulink url="http://apps.gotdotnet.com/xmltools/xsdvalidator/Default.aspx"></ulink></para>
	</listitem>
      </orderedlist>
      <para>The OAI parameters are stored in setup.py in a dictionary called 'OAI' using the tagname as the key e.g. OAI['logfile']</para>
     </sect1>

     <sect1 id='dbp'>
      <title>Adding a new Database parameter</title>
      <para>To add a new database parameter you need to follow a similar process as for adding an <link linkend="oai">OAI parameter</link> the only differences are where the tags go:</para>
      <orderedlist>
	<listitem>
	  <para>Add the name of the parameter to the end of the db_param section:<screen>
        &lt;db_param>
              &lt;host>localhost&lt;/host>
              &lt;port>9675&lt;/port>
        <lineannotation>New tag would go here e.g. &lt;new>value&lt;/new></lineannotation>
        &lt;/db_param></screen></para>
        </listitem>
	<listitem>
	  <para>In the config handler file 'confmerge.py', Parser() function, you need to add the name of your tag into the list of 'if name in' inside the relevant section of the  end element function</para>
	</listitem>
	<listitem>
	  <para>You also need to add the new tag into the config schema 'config.xsd' add the following line into the db_param section of the schema:<screen>&lt;xs:element name="NEWTAG" type="xs:string" /></screen> Replace NEWTAG with the name of the tag you added</para>
	</listitem>
	<listitem>
	  <para>Validate that the schema and the xml file conicide with each other and validate correctly, you can use: <ulink url="http://apps.gotdotnet.com/xmltools/xsdvalidator/Default.aspx"></ulink></para>
	</listitem>
      </orderedlist>
      <para>The database parameters are stored in setup.py in a dictionary called 'db_params' using the tag name as the key, e.g db_params['host']</para>

    </sect1>
    <sect1 id='othernew'>
      <title>Adding any other parameters</title>
      <para> To add any other parameters to the config xml file you need to look at how current parameters are added and follow these steps:</para>
      <orderedlist>
	<listitem>
	  <para>Add the tags to the config.xml file</para>
	</listitem>
	<listitem>
	  <para>Add the necessary to the config.xsd schema file</para>
        </listitem>
	<listitem>
	  <para>Validate the schema and xml file: <ulink url="http://apps.gotdotnet.com/xmltools/xsdvalidator/Default.aspx"></ulink></para>
        </listitem>
	<listitem>
	  <para>Capture the data from the xml file using the confmerge.py script</para>
        </listitem>
	<listitem>
	  <para>Import the dictionary from the handler into setup.py script</para>
        </listitem>
      </orderedlist>
     </sect1>
</chapter>


<chapter id='howinstall'>
    <title>How the whole Installation process works</title>
    <para>Brief explanation of how the Installation process works</para>
    <sect1 id='dist'>
      <title>How Distributing works (setup.py sdist)</title>
      <para>When the 'sdist' command is given the script checks if a version value was given if not it asks for one, it then writes the version number at the top of the main __init__ file, and stores the version number for use with the distribution name. It then copies the config and information files (such as config.xml and readme) to the front directory so that once distributed the files are easier for the user to access.</para>
      <para>The distribution itself is done by python. Using the manifest.in file and the setup function in setup.py it knows which files to include in the distribution and compresses them into a .zip or .tar etc depending on what was asked for. </para>
      </sect1>
    <sect1 id='inst'>
      <title>How the Install works (setup.py install)</title>
      <para>When the 'install' command is given the script writes the MaKaCConfig.py script, writes the setup.cfg file, writes the reconfigure.py script and then copies the MaKaCConfig file to the common directory.</para>
      <para>The actual install is done by python. It uses the setup.cfg file to know what directory to install the build from the distribution in to (if its not the default python site-packages) and then uses the rest of the setup function in setup.py to install any other data files into the directories specified. </para>
      </sect1>
    <sect1 id='upg'>
      <title>What the upgrade does (setup.py upgrade)</title>
      <para>when the upgrade function in the setup.py script is run it asks the user for the main package directory or to type default if they did not specify a custom installation path. The confmerge.py script is then used to merge the old config.xml file with the new one to obtain any custom settings the user had and to add any new paramters that may be in the new config.xml file. The user is asked to check the configurations are correct and to then run the install command. This saves the user from having to rewrite all their configurations each time they want to install a new version.</para>
    </sect1>
     <sect1 id='reconf'>
      <title>What reconfiguring does (reconfigure.py run)</title>
      <para>When the user wants to reconfigure their installation, from the /common directory in the MaKaC installation they can change the config.xml file and then run the reconfigure script. The reconfigure script was generated when the first install was made and this reconfigure script just contains the same code from setup.py but only the functions that generated the MaKaCConfig script. So when run it takes the new config.xml and creates a new MaKaCConfig file from that.</para>
    </sect1>
</chapter>

</book>