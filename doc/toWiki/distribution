INDICO Distribution Guide (Developers)

CERN

-------------------------------------------------------------------------------

Table of Contents
1. Distributing the MaKaC package
   
    1.1. To add files to be distributed
    1.2. To add packages to be distributed
    1.3. To add files to be installed
   
2. Explanation of the XML Configuration File 'config.xml'
   
    2.1. Path Directories
    2.2. Database, Url, Email, SMTP and OAI Parameters
    2.3. File Types and System Icons
   
3. Adding parameters or paths to the XML configuration file
   
    3.1. Adding new File Type or System Icon
    3.2. Adding a new Path parameter
    3.3. Adding a new Stylesheet parameter
    3.4. Adding a new OAI parameter
    3.5. Adding a new Database parameter
    3.6. Adding any other parameters
   
4. How the whole Installation process works
   
    4.1. How Distributing works (setup.py sdist)
    4.2. How the Install works (setup.py install)
    4.3. What the upgrade does (setup.py upgrade)
    4.4. What reconfiguring does (reconfigure.py run)
   
-------------------------------------------------------------------------------

Chapter 1. Distributing the MaKaC package

To Distribute the MaKaC package:

 1. You need to run the distribution from the Indico root directory, a version
    number is needed and a format type is optional.
   
 2. You need to specify the version number that you are distributing, you can
    either do this by:
   
     a. Specifying the version number as an option when running the
        distribution by using:
        setup.py sdist --version x.x.x
        Where x.x.x is the version number
       
     b. Enter the version number when asked and just run the distribution with:
        setup.py sdist
       
 3. If you want a specific format type for example a .tar you need to specify
    this otherwise the format type will be the defaulf for the platform, to
    specify a format type:
    setup.py sdist --format=tar
    This can be done before or after the --version option and in either order,
    i.e.
    setup.py sdist --version x.x.x --format=tar
   
The distribution will be in the dist folder and be called MaKaC-x.x.x.tar,
depending on the version number and format type you gave

-------------------------------------------------------------------------------

1.1. To add files to be distributed

If you want to add any extra files to be distributed with the package, you just
need to add the file name and location to the 'manifest.in' file. For example
if you want to distribute a file called script.py which is in the 'dist'
folder, in the manifest file you can write:
 include dist/scrip.py

-------------------------------------------------------------------------------

1.2. To add packages to be distributed

If you want to add any extra packages to be distributed, you need to edit the
setup() function in the setup.py script, you need to add the name of the
package into the 'packages' section, e.g.
packages=['MaKaC', 'MaKaC.authentication',\
        'MaKaC.common', 'MaKaC.export', 'MaKaC.webinterface',\
        'MaKaC.webinterface.pages', 'MaKaC.webinterface.rh',\
        'MaKaC.webinterface.session', 'MaKaC.webinterface.common',\
        'MaKaC.PDFinterface', 'MaKaC.ICALinterface'],
Your package name needs to go into the end of this list

-------------------------------------------------------------------------------

1.3. To add files to be installed

If you want to add any files to be installed that are not inside the packages
mentioned above you need to specify the file names and the location you want
them to go in, e.g.
data_files=[(x.tplDir, TPLFileList()),\
                  (x.htdocsDir, HTDOCFileList()),\
                  (x.ssDir, SSFileList()),\
                  (x.imageDir, IMGFileList()),
                  (x.confdef,['config.xml','dist/config.xsd',\
                              'reconfigure.py','dist/confmerge.py'])]
The format to add the files is (location,file).

-------------------------------------------------------------------------------

Chapter 2. Explanation of the XML Configuration File 'config.xml'

2.1. Path Directories

Numbered Sections may not been in the same order in the actual config.xml file

<!--Enter Path names in between the pathdir tags, e.g.<pathdir>c:\tmp</pathdir> 
or leave blank for default-->

        <paths>
(1)   <pathname>pkgdirectory</pathname>
            <pathdir></pathdir>
        </paths>

        <paths>
(2)   <pathname>htdocs</pathname> 
            <pathdir></pathdir>
        </paths>
<!--htdocs needs to be the same directory as where you set the modpython handler 
(or blank)-->

        <paths>
(3)   <pathname>archive</pathname> 
            <pathdir></pathdir>
        </paths>

        <paths>
(4)   <pathname>temp</pathname> 
             <pathdir></pathdir>
        </paths>

        <paths>
(5)   <pathname>tpls</pathname> 
    <pathdir></pathdir>
        </paths>

<paths>
(6)   <pathname>ssheets</pathname>
    <pathdir></pathdir>
        </paths> 

        

(1) The main package directory, this is where the main package files for the
    Indico program will be put, under a folder called Makac.
(2) The htdocs directory, this directory holds the webpage files for the
    webinterface.
(3) The archive directory, multimedia files from the conferences will be stored
    in this directory.
(4) The temporary directory, files being uploaded and any other temporary files
    will be stored into this directory, Note: This directory needs to have a
    fair amount of space available.
(5) The templates directory, templates for the webinterface are kept in this
    directory.
(6) The stylesheets directory, the stylesheets are stored in this directory

-------------------------------------------------------------------------------

2.2. Database, Url, Email, SMTP and OAI Parameters

<!--Enter database parameters in between tags, e.g. <port>1234</port>
or leave as they are for default-->

        <db_param>
     (1)     <host>localhost</host>
     (2)     <port>9675</port>
        </db_param>




<!--Enter url base in between tags, e.g. <url>http://localhost/MaKaC</url> 
or leave as it is for default-->

        
     (3)        <url>http://localhost/MaKaC</url>
        


<!--Enter support email in between tags, e.g. <email>indico-project@cern.ch</email> 
or leave for default-->

        
     (4)        <email>indico-project@cern.ch</email>


<!--Enter SMTP Server to send Email or leave for default-->

     (5)        <smtp>smtp.cern.ch</smtp>



<!--OAI Parameters, leave for default -->

      (6) <OAI>
             <logfile>/tmp/oailog.log</logfile>
             <nb_record>100</nb_record>
             <nb_ids>100</nb_ids>
             <oai_rt_exp>90000</oai_rt_exp>
             <namespace>eAgora.cern.ch</namespace>
             <iconfNS>URL_base</iconfNS>
             <iconfXSD>URL_base+"/iconf.xsd"</iconfXSD>
             <reposName>eAgora</reposName>
             <reposId>eAgora.cern.ch</reposId>
       </OAI>
        

(1) The database host, this parameter holds the location of the host that the
    database is stored on.
(2) The database port, this parameter holds the port number of which to contact
    the database.
(3) The Base Url, the url from which Indico can be reached from a web browser.
(4) The support email, the email address for people to contact with support
    issues.
(5) The smtp server, the server to allow emails to be sent out.
(6) The OAI parameters, these are for configuring the open archive interface.

-------------------------------------------------------------------------------

2.3. File Types and System Icons

<!--Known file types-->

(1) <FileType>
            <type>DOC</type>
            <name>Ms Word</name>
            <loc>application/msword</loc>
            <img>doc.gif</img>
          </FileType>

<!-- System Icons -->

(2)     <SysIcon>
             <icon>modify</icon>
             <pic>link.gif</pic>
          </SysIcon>

<!-- Stylesheets-->


(3)   <event>
          <eventname>simple_event</eventname>
              <sheets>
                        <view>static</view>
                        <style>static</style>
              </sheets>
    </event>


<!-- Default Stylesheets -->

(4) <defaultss>
                <eventid>simple_event</eventid>
                <sheet>lecture</sheet>
   </defaultss>
      

(1) FileTypes, These specify the different file types and the name, location
    and image associated with them that are available within Indico.
(2) System Icons, These specify the icon name and the image associated with
    them.
(3) Stylesheets, These specify the stylesheets available for each event with
    the event name, view and stylesheet.
(4) Default Stylesheets, These specify the default stylesheet for each event
    with the event name and stylesheet.

-------------------------------------------------------------------------------

Chapter 3. Adding parameters or paths to the XML configuration file

If parameters or paths need to be added to the config.xml file so the user can
customise them they can be added depending on what paramter they are:

-------------------------------------------------------------------------------

3.1. Adding new File Type or System Icon

To add a new file type or system icon you just need to add another tag to the
xml file

 1. FILE TYPE: To add a File Type just add a FileType tag which has type, name,
    loc and img tags inside it to the bottom of the File Type section, e.g.:
            <FileType>
                        <type>PPT</type>
                        <name>Ms Powerpoint</name>
                        <loc>application/vnd.ms-powerpoint</loc>
                       <img>ppt.gif</img>
            </FileType>
   
 2. SYSTEM ICON: To add a System Icon just add a SysIcon tag which has icon and
    pic tags inside it to the bottom of the System Icons section, e.g.:
            <SysIcon>
                   <icon>modify</icon>
                   <pic>link.gif</pic>
            </SysIcon>
   
Both the File Types and System Icons are stored in dictionarys in the setup.py
file called 'types' and 'systemicons'

-------------------------------------------------------------------------------

3.2. Adding a new Path parameter

To add a new Path parameter you just need to add another 'paths' tag which has
pathname and pathdir inside it to the bottom of the paths section, e.g.:
        <paths>
            <pathname>archive</pathname>
            <pathdir></pathdir>
        </paths>

The paths are are stored in the setup.py in a dictionary called 'paths' using
the <pathname> as the key in the example above to get the path directory you
would use paths['archive']

-------------------------------------------------------------------------------

3.3. Adding a new Stylesheet parameter

To add a new Stylesheet parameter you just need to add another 'sheets' tag
(inside the correct events section) which has view and style inside it to the
bottom of the stylesheets section, e.g.:
        <sheets
            <view>static</view>
            <style>static</style>
        </sheets>

The stylesheets are stored in a dictionary in setup.py call 'stylesheets' with
eventname as the first key and view as the second key.

To add a new Default Stylesheet parameter you just need to add another
'defaultss' tag which has eventid and sheet inside it to the bottom of the
default stylesheets section, e.g.:
        <defaultss>
            <eventid>meeting</eventid>
            <sheet>standard</sheet>
        </defaultss>
      

The stylesheets are stored in a dictionary in setup.py call 'dss' with eventid
as the key .

-------------------------------------------------------------------------------

3.4. Adding a new OAI parameter

To add a new OAI paramter:

 1. You need to add the name of the parameter as a tag to the end of the OAI
    section, e.g.:
            <OAI>
                   <logfile>/tmp/oailog.log </logfile>
                   <nb_record>100 </nb_record>
                                ...
                   <reposName>eAgora </reposName>
                   <reposId>eAgora.cern.ch </reposId
                   New tag would go here e.g. <new>value</new>
            </OAI>
   
 2. In the config handler file 'confmerge.py', Parser() Class, you need to add
    the name of your tag into the list of 'if name in' inside the relevant
    section of the end element function
   
 3. You also need to add the new tag into the config schema 'config.xsd' add
    the following line into the OAI section of the schema:
    <xs:element name="NEWTAG" type="xs:string" />
    Replace NEWTAG with the name of the tag you added
   
 4. Validate that the schema and the xml file conicide with each other and
    validate correctly, you can use: http://apps.gotdotnet.com/xmltools/
    xsdvalidator/Default.aspx
   
The OAI parameters are stored in setup.py in a dictionary called 'OAI' using
the tagname as the key e.g. OAI['logfile']

-------------------------------------------------------------------------------

3.5. Adding a new Database parameter

To add a new database parameter you need to follow a similar process as for
adding an OAI parameter the only differences are where the tags go:

 1. Add the name of the parameter to the end of the db_param section:
            <db_param>
                  <host>localhost</host>
                  <port>9675</port>
            New tag would go here e.g. <new>value</new>
            </db_param>
   
 2. In the config handler file 'confmerge.py', Parser() function, you need to
    add the name of your tag into the list of 'if name in' inside the relevant
    section of the end element function
   
 3. You also need to add the new tag into the config schema 'config.xsd' add
    the following line into the db_param section of the schema:
    <xs:element name="NEWTAG" type="xs:string" />
    Replace NEWTAG with the name of the tag you added
   
 4. Validate that the schema and the xml file conicide with each other and
    validate correctly, you can use: http://apps.gotdotnet.com/xmltools/
    xsdvalidator/Default.aspx
   
The database parameters are stored in setup.py in a dictionary called
'db_params' using the tag name as the key, e.g db_params['host']

-------------------------------------------------------------------------------

3.6. Adding any other parameters

To add any other parameters to the config xml file you need to look at how
current parameters are added and follow these steps:

 1. Add the tags to the config.xml file
   
 2. Add the necessary to the config.xsd schema file
   
 3. Validate the schema and xml file: http://apps.gotdotnet.com/xmltools/
    xsdvalidator/Default.aspx
   
 4. Capture the data from the xml file using the confmerge.py script
   
 5. Import the dictionary from the handler into setup.py script
   
-------------------------------------------------------------------------------

Chapter 4. How the whole Installation process works

Brief explanation of how the Installation process works

-------------------------------------------------------------------------------

4.1. How Distributing works (setup.py sdist)

When the 'sdist' command is given the script checks if a version value was
given if not it asks for one, it then writes the version number at the top of
the main __init__ file, and stores the version number for use with the
distribution name. It then copies the config and information files (such as
config.xml and readme) to the front directory so that once distributed the
files are easier for the user to access.

The distribution itself is done by python. Using the manifest.in file and the
setup function in setup.py it knows which files to include in the distribution
and compresses them into a .zip or .tar etc depending on what was asked for.

-------------------------------------------------------------------------------

4.2. How the Install works (setup.py install)

When the 'install' command is given the script writes the MaKaCConfig.py
script, writes the setup.cfg file, writes the reconfigure.py script and then
copies the MaKaCConfig file to the common directory.

The actual install is done by python. It uses the setup.cfg file to know what
directory to install the build from the distribution in to (if its not the
default python site-packages) and then uses the rest of the setup function in
setup.py to install any other data files into the directories specified.

-------------------------------------------------------------------------------

4.3. What the upgrade does (setup.py upgrade)

when the upgrade function in the setup.py script is run it asks the user for
the main package directory or to type default if they did not specify a custom
installation path. The confmerge.py script is then used to merge the old
config.xml file with the new one to obtain any custom settings the user had and
to add any new paramters that may be in the new config.xml file. The user is
asked to check the configurations are correct and to then run the install
command. This saves the user from having to rewrite all their configurations
each time they want to install a new version.

-------------------------------------------------------------------------------

4.4. What reconfiguring does (reconfigure.py run)

When the user wants to reconfigure their installation, from the /common
directory in the MaKaC installation they can change the config.xml file and
then run the reconfigure script. The reconfigure script was generated when the
first install was made and this reconfigure script just contains the same code
from setup.py but only the functions that generated the MaKaCConfig script. So
when run it takes the new config.xml and creates a new MaKaCConfig file from
that.

