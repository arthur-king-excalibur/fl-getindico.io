Indico development practices and version releasing policy
=========================================================

0. Purpose of this document

This document aims at describing the suggested way for working with the code 
repository when developing for the Indico project.
Currently the Indico sw went into production but the project still goes on as
we are implementing new features. This is a problem because we need to keep 
separated versions for developing and fixing eventual bugs or enhancements in 
the "production" code. CVS and its branching facilities will be used for this 
purpose and this document tries to describe how this will be carried out within
the project.


1. Basic releasing policy

In our scope a "release" means a version of the Indico sw which has been fully
tested and verified to accomplish minimal quality levels and which is ready for
production. Each release will be uniqely identified by a "version number" which
will have the form: "{major version #}.{minor version #}.{patchlevel #}"
    + major version #: will be incremented each time there's an important 
        change in the sw (architectural, technological, iteration, ...)
    + minor version #: will be incremented each time a new feature is
        added to the sw.
    + patch level #: will be reserved for patch releases.


2. Releasing

CVS is used as code repository for the project. It is important that the release
policy is reflected in our CVS so we can, at any time access or generate any
release of the code.
For this purpose, each code release must be tagged in the CVS in the form:
"release_{major version #}.{minor version #}". After tagging any release, 
the responsible must make to sure that the system is working and installing 
fine by retrieving a fresh checkout of the code for the new tag and performing
the required tests. New developement will be always in the main trunk and only
release tag will ensure the stability of the code.
Once a release is confirmed, a new branch must be created. This new branch must 
be tagged in the form "release_{major version #}.{minor version #}.0". This new 
branch is reserved for bugfixes and patch releases so developement can go on 
in the trunk.


3. Patch releasing

As it was said above, once a release is confirmed a new branch must be
created. The tag for the new brach will follow the pattern 
"release_{major version #}.{minor version #}.0" related to the confirmed 
release.
Every bugfix of a release must be done on the branch and once a bugfix 
(or a set of them) is done, the results must be committed to the branch and
a tag must be set increasing the patch level number in one.
After the patch release is tested, checked and so on, a merging with the trunk
must be carried out resolving possible conflicts which may appear. Once the 
conflicts are solved the new code must be committed and the trunk must be 
tagged in the form "merged-release_{major ver #}.{minor ver #}.{patch level #}".


4. References

[1] Version management with CVS <http://www.cvshome.org/docs/manual/>
[2] Open source development with CVS <http://cvsbook.red-bean.com/>
[3] CVS best practices <http://www.magic-cauldron.com/cm/cvs-bestpractices/>
